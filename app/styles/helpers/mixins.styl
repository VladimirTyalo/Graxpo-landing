// Clear the float on any element.
clearfix()
	&:after
		display table
		clear both
		content ''

// Fix no working `-webkit-text-size-adjust: 100%;` in Android.
fix-text-size-adjust()
	background-image linear-gradient(transparent, transparent)

// Set element size
size($width, $height = $width)
	width $width
	height $height

// Set margin on left & right
margin-x($margin)
	margin-left $margin
	margin-right $margin

// Set margin on top & bottom
margin-y($margin)
	margin-top $margin
	margin-bottom $margin

// Set pading on left & right
padding-x($padding)
	padding-left $padding
	padding-right $padding

// Set padding on top & bottom
padding-y($padding)
	padding-top $padding
	padding-bottom $padding

// Set one static retina image
retinaBackground($image, $ext = 'png') {
	background-image url('../images/' + $image + '.' + $ext)

	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
		background-image url('../images/' + $image + '@2x.' + $ext)
	}
}



font-size(font-size = 16px, line-height = 1)
	font-size  font-size // px fallback
	font-size  unit((font-size / 16), rem)
	line-height line-height


font-face(family, path, weight='normal')
	@font-face
		font-family family
		font-weight weight
		font-style normal
		src url(path + '.eot')
		src url(path + '.eot?#iefix') format('embedded-opentype'),
			url(path + '.woff') format('woff'),
			url(path + '.ttf') format('truetype'),
			url(path + '.svg#') format('svg')



// calculate width in %
relative-width(child, parent)
	width (child / parent) * 100 + '%'


// wrapper for section content
container(max-width = 1200px)
	margin 0 auto
	padding 60px 0
	display block
	relative-width(1200, 1300)
	max-width max-width


// title with uderscores in left or middle or rihght
title(left = true, middle = false, right = false, uderscoreColor = color-font-title)
	margin-top 0
	margin-bottom 2em
	position relative
	color color-font-title
	font-family Roboto
	font-size(20px)
	text-transform uppercase
	letter-spacing 3px

	&::after
		content ''
		position absolute
		width 2em
		height 3px
		background uderscoreColor
		bottom -1em

		if left
			left 0

		if middle
			left 50%
			transform translate(-50%)

		if right
			right 0


section-title(color = color-font-title )
	&__title
		title(false, true)
		font-size(20px)
		text-align: center
		margin-bottom 40px
		color color

	&__description
		font-family OpenSans
		font-size(14px)
		text-align center
		relative-width(550, 1365)
		margin auto
		margin-bottom 40px
		color color

info(color)
	&__info-wrapper
		padding 5.3rem 7rem
		flex 0 1 50%

	&__info-title
		title(true, false, false, white)
		color color

	&__info-description
		color color
		font-size(14px)

btn(font-size)
	font-size(font-size)
	color white
	background red
	border none
	text-decoration none
	padding 0.5rem 2em
	text-transform uppercase
	border-radius 0.4em


fading-background(img-url, color = bg-keep-explore, opacity = 0.9)
	position relative

	&__overlay
		position absolute
		top: 0
		left: 0
		width: 100%
		height: 100%;
		background: red
		opacity: 0.9
		transition: 1s
		z-index: 10

		^[-1]:hover &
			opacity: 0

	&__background
		position absolute
		width 100%
		min-height 100%
		top 0
		left 0
		background-image url(img-url)
		//background-size cover
		z-index 1

		^[-1]:hover &
			opacity: 1


placeholder(color = black, color-focus = grey, bg = transparent, bg-focus = transparent)

	input::-webkit-input-placeholder {
		color: color
	}

	input:focus::-webkit-input-placeholder {
		color: color-focus
	}

	/* Firefox < 19 */
	input:-moz-placeholder {
		color: color
	}

	input:focus:-moz-placeholder {
		color: color-focus
	}

	/* Firefox > 19 */
	input::-moz-placeholder {
		color: color
	}

	input:focus::-moz-placeholder {
		color: color-focus
	}

	/* Internet Explorer 10 */
	input:-ms-input-placeholder {
		color: color
	}

	input:focus:-ms-input-placeholder {
		color: color-focus
	}


//paralax() {
//	perspective: 1px;
//	height: 100vh;
//	overflow-x: hidden;
//	-webkit-overflow-scrolling: touch;
//	scrolling: touch;
//}
//
//paralax-group()
//	transform-style: preserve-3d;
//
//paralax-layer(side = 'back', top = auto, right = auto, bottom = auto, left = auto)
//	position absolute
//	if top != auto
//		top top
//	if right != auto
//		right right
//
//	if bottom != auto
//		bottom bottom
//	if left != auto
//		left left
//
//	if side == 'back'
//		paralax-back()
//	if side == 'front'
//		paralax-front()
//
//paralax-front()
//	position absolute
//	z-index 2
//	transform translateZ(0)
//
//paralax-back() {
////This block will move slower because itâ€™s in the "back"
//	transform: translateZ(-1px) scale(2);
//	position: relative;
//}


paralax-body-setup(){
// move scroll  from html to body tag (using overflow)
// and set the perspective to the body

	html {
		overflow: hidden;
	}
	body {
		overflow: auto;
		height: 100vh;
		perspective: $perspective;  // global variable also will need to culculate scale
		-webkit-overflow-scrolling: touch; // for iOS devices
		perspective-origin-x: 100%;
	}
}

paralax-group() {
   transform-style: perserve-3d;
}

paralax-item(deep = 0, z-index = 0, position = relative, top = 0, left = 0,  width = 0, height = 0) {
// The scale factor can be calculated with 1 + (translateZ * -1) / perspective
	$deep = remove-unit(deep);
	$persp = remove-unit($perspective);
	$scale = (1 + ($deep * -1) / $persp);
	$aspect-ratio = ((height / width) * 100)vw;
	$top = top + (-2) * (100vh - $aspect-ratio) / 4;
	top: $top;
	left: left;
	width: (width)px;
	height: (height)px;
	transform: translateZ(deep) scale($scale);
	z-index: z-index;


	transform-origin-x: 100%;
}
